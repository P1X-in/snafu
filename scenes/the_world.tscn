[gd_scene load_steps=19 format=2]

[ext_resource path="res://scenes/assets/images/world_heightmap.png" type="Texture" id=1]
[ext_resource path="res://scenes/assets/images/world_colors.png" type="Texture" id=2]
[ext_resource path="res://scenes/reusable/camera.tscn" type="PackedScene" id=3]
[ext_resource path="res://scenes/assets/sfx/earth.ogg" type="AudioStream" id=4]

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 2 )
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorDecompose" id=4]

[sub_resource type="VisualShaderNodeVectorCompose" id=5]

[sub_resource type="VisualShaderNodeScalarOp" id=6]

[sub_resource type="VisualShaderNodeTexture" id=7]
texture = ExtResource( 1 )
texture_type = 1

[sub_resource type="VisualShaderNodeVectorDecompose" id=8]

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 1.5 ]
operator = 2

[sub_resource type="VisualShader" id=10]
code = "shader_type spatial;
uniform sampler2D tex_vtx_6 : hint_albedo;uniform sampler2D tex_frg_3 : hint_albedo;


void vertex() {
// Input:2
	vec3 n_out2p0;
	n_out2p0 = VERTEX;

// VectorDecompose:3
	float n_out3p0;
	float n_out3p1;
	float n_out3p2;
	n_out3p0 = n_out2p0.x;
	n_out3p1 = n_out2p0.y;
	n_out3p2 = n_out2p0.z;

// Texture:6
	vec3 n_out6p0;
	float n_out6p1;
	vec4 tex_vtx_6_read = texture( tex_vtx_6 , UV.xy );
	n_out6p0 = tex_vtx_6_read.rgb;
	n_out6p1 = tex_vtx_6_read.a;

// VectorDecompose:7
	float n_out7p0;
	float n_out7p1;
	float n_out7p2;
	n_out7p0 = n_out6p0.x;
	n_out7p1 = n_out6p0.y;
	n_out7p2 = n_out6p0.z;

// ScalarOp:8
	float n_in8p1 = 1.50000;
	float n_out8p0;
	n_out8p0 = n_out7p0 * n_in8p1;

// ScalarOp:5
	float n_out5p0;
	n_out5p0 = n_out3p1 + n_out8p0;

// VectorCompose:4
	vec3 n_out4p0;
	n_out4p0 = vec3( n_out3p0 , n_out5p0 , n_out3p2 );

// Output:0
	VERTEX = n_out4p0;

}

void fragment() {
// Input:4
	vec3 n_out4p0;
	n_out4p0 = vec3(UV,0.0);

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	vec4 tex_frg_3_read = texture( tex_frg_3 , n_out4p0.xy );
	n_out3p0 = tex_frg_3_read.rgb;
	n_out3p1 = tex_frg_3_read.a;

// Output:0
	ALBEDO = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 0, 138.343 )
nodes/vertex/0/position = Vector2( 1180, 140 )
nodes/vertex/2/node = SubResource( 3 )
nodes/vertex/2/position = Vector2( 80, 160 )
nodes/vertex/3/node = SubResource( 4 )
nodes/vertex/3/position = Vector2( 304, 190 )
nodes/vertex/4/node = SubResource( 5 )
nodes/vertex/4/position = Vector2( 900, 160 )
nodes/vertex/5/node = SubResource( 6 )
nodes/vertex/5/position = Vector2( 680, 260 )
nodes/vertex/6/node = SubResource( 7 )
nodes/vertex/6/position = Vector2( 60, 360 )
nodes/vertex/7/node = SubResource( 8 )
nodes/vertex/7/position = Vector2( 280, 440 )
nodes/vertex/8/node = SubResource( 9 )
nodes/vertex/8/position = Vector2( 520, 400 )
nodes/vertex/connections = PoolIntArray( 2, 0, 3, 0, 4, 0, 0, 0, 3, 0, 4, 0, 3, 2, 4, 2, 3, 1, 5, 0, 5, 0, 4, 1, 6, 0, 7, 0, 7, 0, 8, 0, 8, 0, 5, 1 )
nodes/fragment/0/position = Vector2( 1000, 140 )
nodes/fragment/3/node = SubResource( 1 )
nodes/fragment/3/position = Vector2( 400, 140 )
nodes/fragment/4/node = SubResource( 2 )
nodes/fragment/4/position = Vector2( 180, 280 )
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 0, 4, 0, 3, 0 )

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 10 )

[sub_resource type="PlaneMesh" id=12]
material = SubResource( 11 )
size = Vector2( 256, 256 )
subdivide_width = 256
subdivide_depth = 256

[sub_resource type="Animation" id=13]
resource_name = "paralax"
length = 4.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("world:rotation_degrees")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.8, 2, 3.3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 1.128, 0, -1.137 ), Vector3( -2.172, 0, 2.295 ), Vector3( -3.101, 0, -1.572 ) ]
}

[sub_resource type="Environment" id=14]
background_mode = 1
background_color = Color( 0.976471, 0.917647, 0.776471, 1 )
background_energy = 7.6
ambient_light_color = Color( 0.0745098, 0.0745098, 0.0745098, 1 )

[node name="the_world" type="Spatial"]

[node name="camera" parent="." instance=ExtResource( 3 )]
transform = Transform( 1, 0, 0, 0, -1.62921e-07, 1, 0, -1, -1.62921e-07, 0, 140, 0 )

[node name="world" type="MeshInstance" parent="."]
transform = Transform( 0.999978, 0.00663427, 0, -0.00663413, 0.999957, -0.00365546, -4.3306e-05, 0.00652747, 0.559988, 0, 0, 0 )
mesh = SubResource( 12 )
material/0 = null

[node name="sun" type="DirectionalLight" parent="."]
transform = Transform( -0.547113, -0.077982, 0.833418, 0.404374, 0.84714, 0.344725, -0.732904, 0.525616, -0.431948, 0, 16.9096, 0 )
light_color = Color( 0.956863, 0.909804, 0.686275, 1 )
light_energy = 4.79
shadow_enabled = true
directional_shadow_blend_splits = true
directional_shadow_max_distance = 1024.0

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "paralax"
anims/paralax = SubResource( 13 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 14 )

[node name="sound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 4 )
autoplay = true
